<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>python on 人生短短几個秋</title>
    <link>https://vincent-233.github.io/tags/python/</link>
    <description>Recent content in python on 人生短短几個秋</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 26 Jul 2024 00:07:19 +0800</lastBuildDate><atom:link href="https://vincent-233.github.io/tags/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>关于回车换行符</title>
      <link>https://vincent-233.github.io/2024/07/26/notes_about_crlf/</link>
      <pubDate>Fri, 26 Jul 2024 00:07:19 +0800</pubDate>
      
      <guid>https://vincent-233.github.io/2024/07/26/notes_about_crlf/</guid>
      <description>术语 回车（Carriage Return, CR, ASCII 13, 通常表示为\r) 换行（Line Feed, LF, ASCII 10，通常表示为\n) 默认值 对于文本文件，Windows默认换行符号为</description>
    </item>
    
    <item>
      <title>DuckDB功能点介绍</title>
      <link>https://vincent-233.github.io/2024/07/13/duckdb_usage/</link>
      <pubDate>Sat, 13 Jul 2024 17:26:11 +0800</pubDate>
      
      <guid>https://vincent-233.github.io/2024/07/13/duckdb_usage/</guid>
      <description>前阵子浏览技术文章不经意间看到DuckDB，文章将它描述成为OLAP版本的SQLite，或嵌入式的PgSQL，有众多现代化分析型数据库的高级</description>
    </item>
    
    <item>
      <title>Python运行MSSQL存储过程采坑记</title>
      <link>https://vincent-233.github.io/2023/08/21/notes_about_pyodbc_and_mssql_sp/</link>
      <pubDate>Mon, 21 Aug 2023 00:02:42 +0800</pubDate>
      
      <guid>https://vincent-233.github.io/2023/08/21/notes_about_pyodbc_and_mssql_sp/</guid>
      <description>虽然入门Python已近4年，但由于日常工作中，特别是生产环境上没有Python项目，对Python一直不算非常熟练，基本上只是偶尔用它在本</description>
    </item>
    
    <item>
      <title>用selenium批量删除CSDN博客</title>
      <link>https://vincent-233.github.io/2022/09/18/delete_csdn_via_py_selenium/</link>
      <pubDate>Sun, 18 Sep 2022 23:32:21 +0800</pubDate>
      
      <guid>https://vincent-233.github.io/2022/09/18/delete_csdn_via_py_selenium/</guid>
      <description>需求与背景 本人早年在CSDN写博客，当时CSDN还是很不错的，论坛活跃，广告不多，也没有各种卖课引流的软文，内容上也无先审后发机制。后来发现</description>
    </item>
    
    <item>
      <title>windows conda环境在cmd/powershell/git-bash下的配置</title>
      <link>https://vincent-233.github.io/2021/08/15/conda-config-windows/</link>
      <pubDate>Sun, 15 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://vincent-233.github.io/2021/08/15/conda-config-windows/</guid>
      <description>在windows各类常用的命令行工具下如何快速启动Anaconda环境下的python呢？ 本文介绍一下我的配置。 cmd 任选一在PATH环境变量内</description>
    </item>
    
    <item>
      <title>关于python import的路径问题</title>
      <link>https://vincent-233.github.io/2021/08/08/119496995/</link>
      <pubDate>Sun, 08 Aug 2021 13:39:50 +0000</pubDate>
      
      <guid>https://vincent-233.github.io/2021/08/08/119496995/</guid>
      <description>模块（python module）就是一个python文件，包（package）就是一个带__init__.py文件的文件夹，可以理解为模块的</description>
    </item>
    
    <item>
      <title>pandas数据处理，字符串先拆分再合并</title>
      <link>https://vincent-233.github.io/2020/06/23/106913549/</link>
      <pubDate>Tue, 23 Jun 2020 00:45:35 +0000</pubDate>
      
      <guid>https://vincent-233.github.io/2020/06/23/106913549/</guid>
      <description>概述 实现之前文章中用SQL实现的功能： 得益于python简洁的表达式，以及pandas库的强大功能，实现起来非常轻松，关键代码仅三行： 代码 读</description>
    </item>
    
    <item>
      <title>pandas数据处理，行列转换</title>
      <link>https://vincent-233.github.io/2020/06/21/106893478/</link>
      <pubDate>Sun, 21 Jun 2020 23:55:02 +0000</pubDate>
      
      <guid>https://vincent-233.github.io/2020/06/21/106893478/</guid>
      <description>概述 用Python实现之前文章中用SQL实现的转换，交叉表转为长宽表。 数据准备 import pandas as pd df = pd.read_csv(r&amp;#39;D:\CategoryConfig.csv&amp;#39;) df .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } 方法一，先列转行</description>
    </item>
    
    <item>
      <title>算法-递归-排列组合</title>
      <link>https://vincent-233.github.io/2020/05/03/105907225/</link>
      <pubDate>Sun, 03 May 2020 19:51:39 +0000</pubDate>
      
      <guid>https://vincent-233.github.io/2020/05/03/105907225/</guid>
      <description>本文主要用递归算法解决大家非常熟悉的排列组合问题。 组合 方法一 需求：求从含m个数据中取出n个数据的所有取法。 解析：设列表为a[m]，从m个数取</description>
    </item>
    
    <item>
      <title>算法-求集合所有子集</title>
      <link>https://vincent-233.github.io/2020/05/03/105901441/</link>
      <pubDate>Sun, 03 May 2020 15:27:11 +0000</pubDate>
      
      <guid>https://vincent-233.github.io/2020/05/03/105901441/</guid>
      <description>问题：求集合所有子集。 下面分别给出两种思路的递归和非递归解法，用python实现。 方法一 a的子集可以分为两部分： 不含a[0]的所有子集 含a[</description>
    </item>
    
    <item>
      <title>Python深拷贝与浅拷贝说明与举例</title>
      <link>https://vincent-233.github.io/2020/05/02/105887338/</link>
      <pubDate>Sat, 02 May 2020 12:08:21 +0000</pubDate>
      
      <guid>https://vincent-233.github.io/2020/05/02/105887338/</guid>
      <description>知识准备 可变类型(mutable)：list、set、dict可变类型，支持原地址直接改变元素（item）的值 不可变类型(immutable</description>
    </item>
    
    <item>
      <title>使用python的faker库和dataclass快速生成测试数据</title>
      <link>https://vincent-233.github.io/2020/03/01/104597650/</link>
      <pubDate>Sun, 01 Mar 2020 19:42:31 +0000</pubDate>
      
      <guid>https://vincent-233.github.io/2020/03/01/104597650/</guid>
      <description>上一篇介绍了如何用纯SQL生成测试数据，但SQL功能有限，本篇介绍python faker库的使用。 需求 生成5000条记录，字段如下： fake</description>
    </item>
    
    <item>
      <title>Python并发之异步编程框架AsyncIO简介</title>
      <link>https://vincent-233.github.io/2020/02/06/104168699/</link>
      <pubDate>Thu, 06 Feb 2020 12:20:25 +0000</pubDate>
      
      <guid>https://vincent-233.github.io/2020/02/06/104168699/</guid>
      <description>在进入并发编程的世界之前，先看一个对比的例子： 举例 串行执行 import time def count(task_name): print(task_name,time.strftime(&amp;#34;%X&amp;#34;),&amp;#34;One&amp;#34;) time.sleep(1) # 模拟一个需要堵塞一秒的任务 print(task_name,time.strftime(&amp;#34;%X&amp;#34;),&amp;#34;Two&amp;#34;) def main(): count(&amp;#39;Task-A&amp;#39;) count(&amp;#39;Task-B&amp;#39;) count(&amp;#39;Task-C&amp;#39;) if __name__ == &amp;#34;__main__&amp;#34;: s = time.time() main() elapsed = time.time() - s print(f&amp;#34;Total Run</description>
    </item>
    
    <item>
      <title>Python装饰器</title>
      <link>https://vincent-233.github.io/2020/02/02/104148685/</link>
      <pubDate>Sun, 02 Feb 2020 20:41:35 +0000</pubDate>
      
      <guid>https://vincent-233.github.io/2020/02/02/104148685/</guid>
      <description>装饰器（decorator）是python特有的语法特性，通过函数封装扩展原函数的功能。 下面一步步通过例子说明它的作用和用法。 函数中定义函数</description>
    </item>
    
    <item>
      <title>python面向对象举例</title>
      <link>https://vincent-233.github.io/2019/11/16/103103791/</link>
      <pubDate>Sat, 16 Nov 2019 23:31:52 +0000</pubDate>
      
      <guid>https://vincent-233.github.io/2019/11/16/103103791/</guid>
      <description>概述 面向对象三大特性：封装、继承、多态，本文通过类继承和方法覆盖的例子来说明python的面向对象编程。 功能说明 实现“数列”基类，然后通过继</description>
    </item>
    
    <item>
      <title>python操作符重载特殊方法列表</title>
      <link>https://vincent-233.github.io/2019/11/16/103104203/</link>
      <pubDate>Sat, 16 Nov 2019 22:58:07 +0000</pubDate>
      
      <guid>https://vincent-233.github.io/2019/11/16/103104203/</guid>
      <description>如下表，python类只要实现了右边所示特殊名称的方法，就实现了操作符重载，可使用左边的操作符语法： Common Syntax Special Method Form a + b a._add_(b); alternatively b._radd_(a) a − b a._sub_(b); alternatively b._rsub_(a) a b a._mul_(b);</description>
    </item>
    
    <item>
      <title>全排列递归算法（Python实现）</title>
      <link>https://vincent-233.github.io/2019/11/08/102962911/</link>
      <pubDate>Fri, 08 Nov 2019 17:36:52 +0000</pubDate>
      
      <guid>https://vincent-233.github.io/2019/11/08/102962911/</guid>
      <description>概述 本文由浅入深，由特殊到一般说明全排列的递归实现。 需求 编写程序，输出所有由a，b，c，d四个字母都出现一次所组成的字符串。 分析 这实际是全排</description>
    </item>
    
    <item>
      <title>python文件遍历与匹配过滤</title>
      <link>https://vincent-233.github.io/2019/10/31/102848314/</link>
      <pubDate>Thu, 31 Oct 2019 23:49:29 +0000</pubDate>
      
      <guid>https://vincent-233.github.io/2019/10/31/102848314/</guid>
      <description>路径/home/ghost/workspace/Other/结构如下 ├── git ├── input │ ├── csv │ │ ├── test_file_1.csv │ │ └── test_file_2.csv │ ├── test.csv │ ├── test_file_1.txt │</description>
    </item>
    
    <item>
      <title>深刻理解python变量</title>
      <link>https://vincent-233.github.io/2019/09/26/101398064/</link>
      <pubDate>Thu, 26 Sep 2019 00:17:56 +0000</pubDate>
      
      <guid>https://vincent-233.github.io/2019/09/26/101398064/</guid>
      <description>概述 python的标识符更像C++中的指针或JAVA中的引用变量，每个标识符与其所指向的内存地址相关联 像 b = a 这样赋值语句，就是为 a 起了一个</description>
    </item>
    
    <item>
      <title>Python数据库编程（以pyodbc和SQLAlchemy为例）</title>
      <link>https://vincent-233.github.io/2019/09/14/100814954/</link>
      <pubDate>Sat, 14 Sep 2019 00:34:24 +0000</pubDate>
      
      <guid>https://vincent-233.github.io/2019/09/14/100814954/</guid>
      <description>概述 本文以pyodbc和sqlalchemy操作SQL Server为例说明python的数据库编程。 pyodbc pyodbc只是众多python database dr</description>
    </item>
    
    <item>
      <title>定时运行conda虚拟环境的python脚本，问题解决</title>
      <link>https://vincent-233.github.io/2019/08/10/99091928/</link>
      <pubDate>Sat, 10 Aug 2019 19:12:13 +0000</pubDate>
      
      <guid>https://vincent-233.github.io/2019/08/10/99091928/</guid>
      <description>问题场景 仅安装了conda版的python环境，需要在Task Schedule中定时运行某python脚本，可是直接在命令中运行python</description>
    </item>
    
    <item>
      <title>配置Jupyter Notebook允许远程访问</title>
      <link>https://vincent-233.github.io/2019/07/26/97418483/</link>
      <pubDate>Fri, 26 Jul 2019 21:38:21 +0000</pubDate>
      
      <guid>https://vincent-233.github.io/2019/07/26/97418483/</guid>
      <description>背景 虚拟机中安装了spark，想要在windows中直接练习pyspark的操作，但又不想在windows中再安装一次spark，于是想到了</description>
    </item>
    
  </channel>
</rss>
